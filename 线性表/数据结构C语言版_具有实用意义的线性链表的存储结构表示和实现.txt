/*
	数据结构C语言版 具有实用意义的线性链表的存储结构表示和实现
	P37-39 
	编译环境：Dev-C++ 4.9.9.2
	日期： 2011年2月10日 
*/

#include <stdio.h>
#include <malloc.h>
#include <stdlib.h>
#include <math.h>


typedef int ElemType;
// 具有实用意义的线性链表的存储结构 
typedef struct LNode	// 结点类型
{
	ElemType data;		// 数据
	struct LNode *next;	// 下一个节点
}LNode, *Link, *Position;

typedef struct LinkList // 链表类型
{
	Link head,tail;		// 分别指向线性链表中的头结点和最后一个结点
	int len;			// 指示当前线性链表中数据元素的个数
}LinkList;


// 分配由p指向的值为e的结点，并返回1；若分配失败。则返回0
int MakeNode(Link *p,ElemType e)
{
	*p = (Link)malloc(sizeof(LNode));	//动态分配一个Link空间
	if(!*p)
		return 0;
	(*p)->data = e;	// 赋值
	return 1;
}

// 释放p所指结点
void FreeNode(Link *p)
{ 
	free(*p);	//老规矩，先释放存储空间，然后置空
	*p=NULL;
}

// 构造一个空的线性链表
int InitList(LinkList *L)
{ 
	Link p;
	p=(Link)malloc(sizeof(LNode)); // 生成头结点 
	if(p)
	{
		p->next=NULL;
		//将头尾结点都分配好，并将其下一结点置空
		(*L).head=(*L).tail=p;
		(*L).len=0;	//初始为0
		return 1;
	}
	else	// 分配失败返回
		return 0;
}

// 将线性链表L重置为空表（头尾结点相同为空表），并释放原链表的结
// 点空间，不释放头尾结点，只是置空而已 
int ClearList(LinkList *L)
{ 
	Link p,q;
	if((*L).head!=(*L).tail)// 不是空表 
	{
		p=q=(*L).head->next;
		(*L).head->next=NULL;
		while(p!=(*L).tail)
		{
			p=q->next;
			free(q);
			q=p;
		}
		free(q);
		(*L).tail=(*L).head;
		(*L).len=0;
	}
	return 1;
}

// 销毁线性链表L，L不再存在
int DestroyList(LinkList *L)
{ 
	ClearList(L);			// 清空链表（头尾结点并没有释放） 
	FreeNode(&(*L).head);	//再释放头尾结点
	(*L).tail=NULL;
	(*L).len=0;
	return 1;
}

// h指向L的一个结点，把h当做头结点，将s所指结点插入在第一个结点之前 
// 头结点没有数据域，而第一个结点是h->next
int InsFirst(LinkList *L,Link h,Link s)
{ 
	s->next = h->next;
	h->next=s;
	if(h==(*L).tail)		// 如果h指向尾结点 
		(*L).tail=h->next;	// 修改尾指针 
	(*L).len++;
	return 1;
}

// h指向L的一个结点，把h当做头结点，删除链表中的第一个结点并以q返回。 
// 若链表为空(h指向尾结点)，q=NULL，返回0 
// 形参增加L,因为需修改L
int DelFirst(LinkList *L,Link h,Link *q)  
{
	*q=h->next;
	if(*q) // 链表非空 
	{
		h->next=(*q)->next;
		if(!h->next)	// 删除尾结点 
			(*L).tail=h; // 修改尾指针 
		(*L).len--;
		return 1;
	}
	else
		return 0; // 链表空 
}

// 将指针s(s->data为第一个数据元素)所指(彼此以指针相链,以NULL结尾)的 
// 一串结点链接在线性链表L的最后一个结点之后,并改变链表L的尾指针指向新 
// 的尾结点 
int Append(LinkList *L,Link s)
{	
	int i=1;	//记录s为头的串结点个数
	(*L).tail->next=s;	//尾结点指向s
	while(s->next)
	{
		s=s->next;
		i++;
	}
	(*L).tail=s;
	(*L).len+=i;
	return 1;
}

// 已知p指向线性链表L中的一个结点，返回p所指结点的直接前驱的位置 
// 若无前驱，则返回NULL 
Position PriorPos(LinkList L,Link p)
{
	Link q;
	q=L.head->next;
	if(q==p) // 无前驱 
		return NULL;
	else
	{
		while(q->next!=p) // q不是p的直接前驱 
			q=q->next;
		return q;
	}
}

// 删除线性链表L中的尾结点并以q返回，改变链表L的尾指针指向新的尾结点
int Remove(LinkList *L,Link *q)
{
	Link p=(*L).head;
	if((*L).len==0) // 空表 
	{
		*q=NULL;
		return 0;
	}
	while(p->next != (*L).tail)	//没到表尾，继续循环
		p=p->next;
	*q=(*L).tail;
	p->next=NULL;
	(*L).tail=p;
	(*L).len--;
	return 1;
}

// 已知p指向线性链表L中的一个结点，将s所指结点插入在p所指结点之前， 
// 并修改指针p指向新插入的结点 
int InsBefore(LinkList *L,Link *p,Link s)
{	
	Link q;
	q=PriorPos(*L,*p); // q是p的前驱 
	if(!q) // p无前驱 
		q=(*L).head;
	//将s插在p的前面
	s->next=*p;
	q->next=s;
	*p=s;

	(*L).len++;
	return 1;
}

// 已知p指向线性链表L中的一个结点，将s所指结点插入在p所指结点之后， 
// 并修改指针p指向新插入的结点 
int InsAfter(LinkList *L,Link *p,Link s)
{
	if(*p==(*L).tail) // 修改尾指针 
		(*L).tail=s;
	//将s插在p的后面
	s->next=(*p)->next;
	(*p)->next=s;
	*p=s;
	(*L).len++;
	return 1;
}

// 已知p指向线性链表中的一个结点，用e更新p所指结点中数据元素的值
int SetCurElem(Link p,ElemType e)
{
	p->data=e;
	return 1;
}

// 已知p指向线性链表中的一个结点，返回p所指结点中数据元素的值
ElemType GetCurElem(Link p)
{ 
	return p->data;
}

// 若线性链表L为空表，则返回1，否则返回0
int ListEmpty(LinkList L)
{
	if(L.len)
		return 0;
	else
		return 1;
}

// 返回线性链表L中元素个数 
int ListLength(LinkList L)
{
	return L.len;
}

// 返回线性链表L中头结点的位置
Position GetHead(LinkList L)
{ 
	return L.head;
}

// 返回线性链表L中最后一个结点的位置 
Position GetLast(LinkList L)
{
	return L.tail;
}

// 已知p指向线性链表L中的一个结点，返回p所指结点的直接后继的位置 
// 若无后继，则返回NULL 
Position NextPos(Link p)
{   
	return p->next;
}

// 返回p指示线性链表L中第i个结点的位置，并返回1，i值不合法时返回0 
// i=0为头结点 
int LocatePos(LinkList L,int i,Link *p)
{   
	int j;
	if(i<0||i>L.len)
		return 0;
	else
	{
		*p=L.head;
		for(j=1;j<=i;j++)
			*p=(*p)->next;
		return 1;
	}
}

// 返回线性链表L中第1个与e满足函数compare()判定关系的元素的位置， 
// 若不存在这样的元素，则返回NULL 
Position LocateElem(LinkList L,ElemType e,
	int (*compare)(ElemType,ElemType))
{	
	Link p=L.head;
	do
		p=p->next;
	while(p&&!(compare(p->data,e))); // 没到表尾且没找到满足关系的元素 
	return p;
}

// 依次对L的每个数据元素调用函数visit()
int ListTraverse(LinkList L,void(*visit)(ElemType))
{
	Link p=L.head->next;
	int j;
	for(j=1;j<=L.len;j++)
	{
		visit(p->data);
		p=p->next;
	}
	printf("\n");
	return 1;
}

// 已知L为有序线性链表，将元素e按非降序插入在L中。（用于一元多项式）
int OrderInsert(LinkList *L,ElemType e,int (*comp)(ElemType,ElemType))
{
	Link o,p,q;
	q=(*L).head;
	p=q->next;
	while(p!=NULL&&comp(p->data,e)<0) // p不是表尾且元素值小于e 
	{
		q=p;
		p=p->next;
	}
	o=(Link)malloc(sizeof(LNode)); // 生成结点 
	o->data=e; // 赋值 
	q->next=o; // 插入 
	o->next=p;
	(*L).len++; // 表长加1 
	if(!p) // 插在表尾 
		(*L).tail=o; // 修改尾结点 
	return 1;
}

// 若升序链表L中存在与e满足判定函数compare()取值为0的元素，则q指示L中
// 第一个值为e的结点的位置，并返回1；否则q指示第一个与e满足判定函数 
// compare()取值>0的元素的前驱的位置。并返回0。（用于一元多项式） 
int LocateElemP(LinkList L,ElemType e,Position *q,
	int(*compare)(ElemType,ElemType))
{   
	Link p=L.head,pp;
	do
	{
		pp=p;
		p=p->next;
	}while(p&&(compare(p->data,e)<0)); // 没到表尾且p->data.expn<e.expn 
	if(!p||compare(p->data,e)>0) // 到表尾或compare(p->data,e)>0 
	{
		*q=pp;
		return 0;
	}
	else // 找到 
	{
		*q=p;
		return 1;
	}
}

// 算法2.20 P39 
// 在带头结点的单链线性表L的第i个元素之前插入元素e
int ListInsert_L(LinkList *L,int i,ElemType e) 
{ 
	Link h,s;
	if(!LocatePos(*L,i-1,&h))
		return 0; // i值不合法 
	if(!MakeNode(&s,e))
		return 0; // 结点分配失败 
	InsFirst(L,h,s); //对于从第i个结点开始的链表,第i-1个结点是它的头结点 
	return 1;
}

// 算法2.21 P39 
// 已知单链线性表La和Lb的元素按值非递减排列。归并La和Lb得到新的单链 
// 线性表Lc，Lc的元素也按值非递减排列。 
int MergeList_L(LinkList La,LinkList Lb,LinkList *Lc,
	int(*compare)(ElemType,ElemType))
{
	Link ha,hb,pa,pb,q;
	ElemType a,b;
	if(!InitList(Lc))
		return 0; // 存储空间分配失败 
	ha=GetHead(La); // ha和hb分别指向La和Lb的头结点 
	hb=GetHead(Lb);
	pa=NextPos(ha); // pa和pb分别指向La和Lb的第一个结点 
	pb=NextPos(hb);
	while(!ListEmpty(La)&&!ListEmpty(Lb)) // La和Lb均非空 
	{
		a=GetCurElem(pa); // a和b为两表中当前比较元素 
		b=GetCurElem(pb);
		if(compare(a,b)<=0)
		{
			DelFirst(&La,ha,&q);
			InsFirst(Lc,(*Lc).tail,q);
			pa=NextPos(ha);
		}
		else // a>b      
		{
			DelFirst(&Lb,hb,&q);
			InsFirst(Lc,(*Lc).tail,q);
			pb=NextPos(hb);
		}
	}
	if(!ListEmpty(La))
		Append(Lc,pa);
	else
		Append(Lc,pb);
	FreeNode(&ha);
	FreeNode(&hb);
	return 1;
}


int compare(ElemType c1,ElemType c2) // c1等于c2 
{
	if(c1==c2)
		return 1;
	else
		return 0;
}



// 根据a<、=或>b,分别返回-1、0或1
int cmp(ElemType a,ElemType b)
{
	if(a==b)
		return 0;
	else
		return (a-b)/abs(a-b);
}

int comp(ElemType c1,ElemType c2)
{
	return c1-c2;
}

void visit(ElemType c)
{
	printf("%d ",c);
}

int main()
{
	int i, j, k;
	Link p,h;
	LinkList L, La, Lb, Lc;
	
	i=InitList(&L);
	if(!i) // 初始化空的线性表L不成功 
		exit(0); // 退出程序运行 
	for(j=1;j<=2;j++)
	{
		MakeNode(&p,j); // 生成由p指向、值为j的结点 
		InsFirst(&L,L.tail,p); // 插在表尾 
	}
	OrderInsert(&L,0,cmp); // 按升序插在有序表头 
	for(j=0;j<=3;j++)
	{
		i=LocateElemP(L,j,&p,cmp);
		if(i)
			printf("链表中有值为%d的元素。\n",p->data);
		else
			printf("链表中没有值为%d的元素。\n",j);
	}
	printf("输出链表：");
	ListTraverse(L,visit); // 输出L 
	for(j=1;j<=4;j++)
	{
		printf("删除表头结点：");
		DelFirst(&L,L.head,&p); // 删除L的首结点，并以p返回 
		if(p)
			printf("%d\n",GetCurElem(p));
		else
			printf("表空，无法删除 p=%u\n",p);
	}
	printf("L中结点个数=%d L是否空 %d(1:空 0:否)\n",
		ListLength(L),ListEmpty(L));
	MakeNode(&p,10);
	p->next=NULL; // 尾结点 
	for(j=4;j>=1;j--)
	{
		MakeNode(&h,j*2);
		h->next=p;
		p=h;
	} // h指向一串5个结点，其值依次是2 4 6 8 10 
	Append(&L,h); // 把结点h链接在线性链表L的最后一个结点之后 
	OrderInsert(&L,12,cmp); // 按升序插在有序表尾头 
	OrderInsert(&L,7,cmp); // 按升序插在有序表中间 
	printf("输出链表：");
	ListTraverse(L,visit); // 输出L 
	for(j=1;j<=2;j++)
	{
		p=LocateElem(L,j*5,compare);
		if(p)
			printf("L中存在值为%d的结点。\n",j*5);
		else
			printf("L中不存在值为%d的结点。\n",j*5);
	}
	for(j=1;j<=2;j++)
	{
		LocatePos(L,j,&p); // p指向L的第j个结点 
		h=PriorPos(L,p); // h指向p的前驱 
		if(h)
			printf("%d的前驱是%d。\n",p->data,h->data);
		else
			printf("%d没前驱。\n",p->data);
	}
	k=ListLength(L);
	for(j=k-1;j<=k;j++)
	{
		LocatePos(L,j,&p); // p指向L的第j个结点 
		h=NextPos(p); // h指向p的后继 
		if(h)
			printf("%d的后继是%d。\n",p->data,h->data);
		else
			printf("%d没后继。\n",p->data);
	}
	printf("L中结点个数=%d L是否空 %d(1:空 0:否)\n",
		ListLength(L),ListEmpty(L));
	p=GetLast(L); // p指向最后一个结点 
	SetCurElem(p,15); // 将最后一个结点的值变为15 
	printf("第1个元素为%d 最后1个元素为%d\n",
		GetCurElem(GetHead(L)->next),GetCurElem(p));
	MakeNode(&h,10);
	InsBefore(&L,&p,h); // 将10插到尾结点之前，p指向新结点 
	p=p->next; // p恢复为尾结点 
	MakeNode(&h,20);
	InsAfter(&L,&p,h); // 将20插到尾结点之后 
	k=ListLength(L);
	printf("依次删除表尾结点并输出其值：");
	for(j=0;j<=k;j++)
	{
		i=Remove(&L,&p);
		if(!i) // 删除不成功 
			printf("删除不成功 p=%u\n",p);
		else
			printf("%d ",p->data);
	}
	MakeNode(&p,29); // 重建具有1个结点(29)的链表 
	InsFirst(&L,L.head,p);
	DestroyList(&L); // 销毁线性链表L 
	printf("销毁线性链表L之后: L.head=%u L.tail=%u L.len=%d\n",
		L.head,L.tail,L.len);
 
	InitList(&La);
	for(j=1;j<=5;j++)
		ListInsert_L(&La,j,j); // 顺序插入 1 2 3 4 5 
	printf("La=");
	ListTraverse(La,visit);
	InitList(&Lb);
	for(j=1;j<=5;j++)
		ListInsert_L(&Lb,j,2*j); // 顺序插入 2 4 6 8 10 
	printf("Lb=");
	ListTraverse(Lb,visit);
	InitList(&Lc);
	MergeList_L(La,Lb,&Lc,comp); // 归并La和Lb，产生Lc 
	printf("Lc=");
	ListTraverse(Lc,visit);
	DestroyList(&Lc);

	system("pause");
	return 0;
}
/*
输出效果：

链表中有值为0的元素。
链表中有值为1的元素。
链表中有值为2的元素。
链表中没有值为3的元素。
输出链表：0 1 2
删除表头结点：0
删除表头结点：1
删除表头结点：2
删除表头结点：表空，无法删除 p=0
L中结点个数=0 L是否空 1(1:空 0:否)
输出链表：2 4 6 7 8 10 12
L中不存在值为5的结点。
L中存在值为10的结点。
2没前驱。
4的前驱是2。
10的后继是12。
12没后继。
L中结点个数=7 L是否空 0(1:空 0:否)
第1个元素为2 最后1个元素为15
依次删除表尾结点并输出其值：20 15 10 10 8 7 6 4 2 删除不成功 p=0
销毁线性链表L之后: L.head=0 L.tail=0 L.len=0
La=1 2 3 4 5
Lb=2 4 6 8 10
Lc=1 2 2 3 4 4 5 6 8 10
请按任意键继续. . . 

*/ 
