/*
	数据结构C语言版 次优查找树 
	P223
	编译环境：Dev-C++ 4.9.9.2
	日期：2011年2月15日 
*/

#include <stdio.h>
#include <malloc.h>

#define N 9 // 数据元素个数 
typedef char KeyType; // 设关键字域为字符型 

typedef struct // 数据元素类型 
{
	KeyType key;//关键字
	int weight;	//权值
}ElemType;

// 静态查找表的顺序存储结构 
typedef struct
{
	// 数据元素存储空间基址，建表时按实际长度分配，0号单元留空 
	ElemType *elem;
	int length;		// 表长度 
}SSTable;

ElemType r[N]={
	{'A',1},{'B',1},{'C',2},{'D',5},{'E',3},
	{'F',4},{'G',4},{'H',3},{'I',5}
}; // 数据元素(以教科书例9-1为例),全局变量 */

int sw[N+1]; // 累计权值，全局变量 */

typedef ElemType TElemType;

//  二叉树的二叉链表存储表示 

typedef struct BiTNode
{
	TElemType data;	//数据域
	struct BiTNode *lchild,*rchild; // 左右孩子指针 
}BiTNode,*BiTree;

int Creat_Seq(SSTable *ST,int n)
{ 
	int i;
	(*ST).elem = (ElemType *)calloc(n+1,sizeof(ElemType)); // 动态生成n+1个数据元素空间(0号单元不用) 
	if(!(*ST).elem)
		return 0;
	for(i=1;i<=n;i++)
		*((*ST).elem+i)=r[i-1]; // 将全局数组r的值依次赋给ST 
	(*ST).length=n;
	return 1;
}

// 重建静态查找表为按关键字非降序排序。 
void Ascend(SSTable *ST)
{ 
	int i,j,k;
	for(i=1;i<(*ST).length;i++)
	{
		k=i;
		(*ST).elem[0] = (*ST).elem[i];	// 待比较值存[0]单元 
		for(j = i + 1; j <= (*ST).length; j++)
			if((*ST).elem[j].key < (*ST).elem[0].key)
			{
				k = j;
				(*ST).elem[0] = (*ST).elem[j];
			}
		if(k != i)	// 有更小的值则交换 
		{
			(*ST).elem[k] = (*ST).elem[i];
			(*ST).elem[i] = (*ST).elem[0];
		}
	}
}

//	构造一个含n个数据元素的静态按关键字非降序查找表ST。
//	数据来自全局数组r。
int Creat_Ord(SSTable *ST,int n)
{ 
	int f;
	f = Creat_Seq(ST,n);
	if( f )
		Ascend( ST );
	
	return f;
}

//  销毁表ST。 
int Destroy(SSTable *ST)
{ 
	free((*ST).elem);
	(*ST).elem = NULL;
	(*ST).length = 0;
	
	return 1;
}

// 按顺序对ST的每个元素调用函数Visit()一次且仅一次。
int Traverse(SSTable ST, void (* Visit)(ElemType))
{	
	ElemType *p;
	int i;
	p = ++ST.elem;	// p指向第一个元素,第0个元素没有用 
	for(i = 1;i <= ST.length; i++)
		Visit(*p++);
	return 1;
}

// 算法9.3 P223
// 由有序表R[low..high]及其累计权值表sw(其中sw[0]==0)递归构造 
// 次优查找树T。
int SecondOptimal(BiTree *T, ElemType R[],int sw[],int low,int high)
{
	int i,j;
	double min,dw;
	i=low;
	min=fabs(sw[high]-sw[low]);	//fabs函数是求绝对值的
	dw=sw[high]+sw[low-1];	
	for(j=low+1;j<=high;++j) // 选择最小的△Pi值 
		if(fabs(dw-sw[j]-sw[j-1]) < min)
		{
			i=j;
			min=fabs(dw-sw[j]-sw[j-1]);
		}
	*T=(BiTree)malloc(sizeof(BiTNode));
	if(!*T)
		return 0;
	(*T)->data = R[i]; // 生成结点 
	if(i==low)
		(*T)->lchild=NULL; // 左子树空 
	else
		SecondOptimal(&(*T)->lchild,R,sw,low,i-1); // 构造左子树 
	if(i==high)
		(*T)->rchild=NULL; // 右子树空 
	else
		SecondOptimal(&(*T)->rchild,R,sw,i+1,high); // 构造右子树 
	return 1;
}

// 按照有序表ST中各数据元素的Weight域求累计权值表sw
void FindSW(int sw[],SSTable ST)
{ 
	int i;
	sw[0]=0;
	// sw[i]表示i前面所有元素的权值之和包括i在内
	for(i=1;i<=ST.length;i++)
		sw[i]=sw[i-1]+ST.elem[i].weight;
}

typedef BiTree SOSTree; // 次优查找树采用二叉链表的存储结构 

// 算法9.4 P225
// 由有序表ST构造一棵次优查找树T。ST的数据元素含有权域weight。
int CreateSOSTree(SOSTree *T,SSTable ST)
{
	if(ST.length==0)
		*T=NULL;
	else
	{
		FindSW(sw,ST); // 按照有序表ST中各数据元素的Weight域求累计权值表sw 
		SecondOptimal(T,ST.elem,sw,1,ST.length);	//构造次优查找树
	}
	return 1;
}

// 在次优查找树T中查找关键字等于key的元素。找到则返回1，否则返回0
int Search_SOSTree(SOSTree *T,KeyType key)
{ 
	while(*T) // T非空 
		if((*T)->data.key==key)
			return 1;
		else if((*T)->data.key>key)
			*T=(*T)->lchild;
		else
			*T=(*T)->rchild;
	return 0; // 顺序表中不存在待查元素 
}

// Traverse()调用的函数
void print(ElemType c) 
{
	printf("(%c %d) ",c.key,c.weight);
}

int main()
{
	SSTable st;	//静态查找表
	SOSTree t;	//次优查找树
	int i;
	KeyType s;
	
	Creat_Ord(&st,N);		// 由全局数组产生非降序静态查找表st 
	Traverse(st,print);
	CreateSOSTree(&t,st);	// 由有序表构造一棵次优查找树 
	printf("\n请输入待查找的字符: ");
	scanf("%c",&s);
	i=Search_SOSTree(&t,s);
	if(i)
		printf("%c的权值是%d\n",s,t->data.weight);
	else
		printf("表中不存在此字符\n");
		
	system("pause");
	return 0; 
}

/*
输出效果：

(A 1) (B 1) (C 2) (D 5) (E 3) (F 4) (G 4) (H 3) (I 5)
请输入待查找的字符: E
E的权值是3
请按任意键继续. . . 

*/ 
