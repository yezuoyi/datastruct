/*
	数据结构C语言版 八皇后
	P151 
	编译环境：Dev-C++ 4.9.9.2
	日期：2011年2月13日 
*/

#include <stdio.h>

static char Queen[8][8];
static int a[8];
static int b[15];
static int c[15];
static int iQueenNum=0; //记录总的棋盘状态数

void qu(int i); //参数i代表行

int main()
{
	int iLine,iColumn;
	//棋盘初始化，空格为*，放置皇后的地方为@
	for(iLine=0;iLine<8;iLine++)
	{
		a[iLine]=0; //列标记初始化，表示无列冲突
	for(iColumn=0;iColumn<8;iColumn++)
		Queen[iLine][iColumn]='*';
	}
	//主、从对角线标记初始化，表示没有冲突
	for(iLine=0;iLine<15;iLine++)
		b[iLine]=c[iLine]=0;
	qu(0);

	system("pause");
	return 0;
}

void qu(int i)
{
	int iColumn;
	for(iColumn=0;iColumn<8;iColumn++)
	{
		if(a[iColumn]==0&&b[i-iColumn+7]==0&&c[i+iColumn]==0) //如果无冲突
		{
			Queen[i][iColumn]='@'; //放皇后
			a[iColumn]=1; //标记，下一次该列上不能放皇后
			b[i-iColumn+7]=1; //标记，下一次该主对角线上不能放皇后
			c[i+iColumn]=1; //标记，下一次该从对角线上不能放皇后
			if(i<7) 
				qu(i+1); //如果行还没有遍历完，进入下一行
			else //否则输出
			{
				//输出棋盘状态
				int iLine,iColumn;
				printf("第%d种状态为：\n",++iQueenNum);
				for(iLine=0;iLine<8;iLine++)
				{
					for(iColumn=0;iColumn<8;iColumn++)
						printf("%c ",Queen[iLine][iColumn]);
					printf("\n");
				}
				printf("\n\n");
				if(iQueenNum % 10 == 0)
				{
					getch();
				}
			}
			// 如果前次的皇后放置导致后面的放置无论如何都不能满足要
			// 求，则回溯，重置
			Queen[i][iColumn]='*';
			a[iColumn]=0;
			b[i-iColumn+7]=0;
			c[i+iColumn]=0;
		}
	}
}

/*
输出效果：

第1种状态为：
@ * * * * * * *
* * * * @ * * *
* * * * * * * @
* * * * * @ * *
* * @ * * * * *
* * * * * * @ *
* @ * * * * * *
* * * @ * * * *


第2种状态为：
@ * * * * * * *
* * * * * @ * *
* * * * * * * @
* * @ * * * * *
* * * * * * @ *
* * * @ * * * *
* @ * * * * * *
* * * * @ * * *


第3种状态为：
@ * * * * * * *
* * * * * * @ *
* * * @ * * * *
* * * * * @ * *
* * * * * * * @
* @ * * * * * *
* * * * @ * * *
* * @ * * * * *


第4种状态为：
@ * * * * * * *
* * * * * * @ *
* * * * @ * * *
* * * * * * * @
* @ * * * * * *
* * * @ * * * *
* * * * * @ * *
* * @ * * * * *


第5种状态为：
* @ * * * * * *
* * * @ * * * *
* * * * * @ * *
* * * * * * * @
* * @ * * * * *
@ * * * * * * *
* * * * * * @ *
* * * * @ * * *


第6种状态为：
* @ * * * * * *
* * * * @ * * *
* * * * * * @ *
@ * * * * * * *
* * @ * * * * *
* * * * * * * @
* * * * * @ * *
* * * @ * * * *


第7种状态为：
* @ * * * * * *
* * * * @ * * *
* * * * * * @ *
* * * @ * * * *
@ * * * * * * *
* * * * * * * @
* * * * * @ * *
* * @ * * * * *


第8种状态为：
* @ * * * * * *
* * * * * @ * *
@ * * * * * * *
* * * * * * @ *
* * * @ * * * *
* * * * * * * @
* * @ * * * * *
* * * * @ * * *


第9种状态为：
* @ * * * * * *
* * * * * @ * *
* * * * * * * @
* * @ * * * * *
@ * * * * * * *
* * * @ * * * *
* * * * * * @ *
* * * * @ * * *


第10种状态为：
* @ * * * * * *
* * * * * * @ *
* * @ * * * * *
* * * * * @ * *
* * * * * * * @
* * * * @ * * *
@ * * * * * * *
* * * @ * * * * 


*/
