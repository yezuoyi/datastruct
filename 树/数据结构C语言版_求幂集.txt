/*
	数据结构C语言版 求幂集 
	P149
	编译环境：Dev-C++ 4.9.9.2
	日期：2011年2月13日 
*/
#include <stdio.h>
#include <malloc.h>
#include <stdlib.h>

typedef int ElemType;		// 定义数据结构元素的数据类型

#define LIST_INIT_SIZE 10	// 线性表存储空间的初始分配量
#define LISTINCREMENT 5		// 线性表存储空间的分配增量

typedef struct
{
	ElemType *elem;	// 存储空间基址
	int length;		// 当前长度
	int listsize;	// 当前分配的存储容量(以sizeof(ElemType)为单位)
}SqList;



// 构造一个空的顺序线性表即对顺序表结构体中的所有元素
// 进行初始化。算法2.3，P23.
int InitList(SqList *L)
{
	// 分配指定大小的存储空间给顺序表
	(*L).elem = (ElemType*)malloc(LIST_INIT_SIZE * sizeof(ElemType));
	if( !(*L).elem ) // 存储分配失败
		exit(0);
	(*L).length = 0; // 当前长度初始化为0
	// 指定分配的存储容量
	(*L).listsize = LIST_INIT_SIZE;
	
	return 1;
}

// 返回L中数据元素个数。
int ListLength(SqList L)
{
	// L.length刚好记录了当前顺序表的长度，直接返回
	return L.length;
}

// 用e返回L中第i个数据元素的值，第i个数据元素就是L.elem[i-1]。
int GetElem(SqList L,int i,ElemType *e)
{
	// 首先进行异常处理
	if(i < 1 || i > L.length)
		exit(0);
	
	/* 
		注意顺序表基址L.elem[0] 表示第一个数，而第i个数则是用
		基址L.elem + i - 1来表示,也可以用L.elem[i-1]表示。为什么
		可以那样表示呢？因为l.elem是基地址，相当于数组头一样，指
		示了一个首地址，然后对地址进行加减，形成不同元素的地址。
		*是取地址所指的内容，所以*(L.elem+i-1)就是第i个数据的值了。
	*/
	*e = *(L.elem + i - 1);
	// *e = L.elem[i-1];
	
	return 1;
}

// 算法2.4 P24
// 在L中第i个位置之前插入新的数据元素e，L的长度加1.
int ListInsert(SqList *L,int i,ElemType e)
{
	ElemType *newbase, *q, *p;
	// 输入的i不合法
	if(i < 1 || i > (*L).length + 1)
		return 0;
	// 当前存储空间已满,增加分配
	if( (*L).length >= (*L).listsize)
	{
		// realloc改变(*L).elem所指内存的大小，原始所指内存中的
		// 数据不变。
		newbase = (ElemType *)realloc((*L).elem,
			((*L).listsize + LISTINCREMENT) * sizeof(ElemType));
		if( !newbase )
			exit(0);
		(*L).elem = newbase; // 新基址
		(*L).listsize += LISTINCREMENT; // 增加存储容量
	}
	// 指定插入的位置
	q = (*L).elem + i - 1;
	// q之后的元素右移一步，以腾出位置
	for(p = (*L).elem + (*L).length - 1; p >= q; --p)
		*(p+1) = *p;
	*q = e;			// 插入e
	++(*L).length;	// 表长增1
	
	return 1;
}

/*	算法2.5 P25
	删除L的第i个数据元素，并用e返回其值，L的长度减1.
*/
int ListDelete(SqList *L,int i,ElemType *e)
{
	ElemType *p,*q;

	// i值不合法
	if( i < 1 || i > (*L).length)
		return 0;
	p = (*L).elem + i - 1;			// p为被删除元素的位置
	*e = *p;						// 被删除元素的值赋给e
	q = (*L).elem + (*L).length-1;	// 表尾元素的位置
	for(++p; p <= q; ++p)			// 被删除元素之后的元素左移
		*(p-1) = *p;
	(*L).length--;					// 表长减1
	
	return 1;
}

void Output(SqList L){
	int j;
	for(j=1;j<=L.length;j++)
     printf("%d ",*(L.elem+j-1));
	printf("\n");
}

// 算法6.15 P150 
// 线性表A表示集合A，线性表B表示幂集ρ(A)的一个元素。
// 局部量k为进入函数时表B的当前长度。
// 第一次调用本函数时，B为空表，i＝1。
void GetPowerSet(int i, SqList A, SqList *B) {
   ElemType x;
   int k;
   if (i > ListLength(A))  
	   Output(*B); // 输出当前B值，即ρ(A)的一个元素
   else { 
      GetElem(A, i, &x);        
	  k = ListLength(*B);
      ListInsert(B, k+1, x);   
	  GetPowerSet(i+1, A, B);
      ListDelete(B, k+1, &x); 
	  GetPowerSet(i+1, A, B);
   }
}


int main(){
	int n,i;
	ElemType e;
	SqList a,b;

	printf("请输入集合A的元素个数：\n");
	scanf("%d",&n);
	InitList(&a);
	printf("请输入集合A的元素：(空格区分)\n");
	for(i=1;i<=n;i++){
		scanf("%d",&e);
		ListInsert(&a,i,e);
	}
	InitList(&b);
	printf("进行冥集合运算!\n");
	GetPowerSet(1, a, &b);
	
	system("pause");
	return 0;
}
/*
输出效果：

请输入集合A的元素个数：
3
请输入集合A的元素：(空格区分)
1 2 3
进行冥集合运算!
1 2 3
1 2
1 3
1
2 3
2
3

请按任意键继续. . . 

*/
