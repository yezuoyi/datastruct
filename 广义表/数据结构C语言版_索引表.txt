/*
	数据结构C语言版 索引表
	P86-P87 
	编译环境：Dev-C++ 4.9.9.2
	日期：2011年2月8日
	
	说明一下，常用词表文件的数据，第一行是词表含有的常用词个数，然
	后每一行一个词，都是以回车符结束的。
	书目文件，每一行前面三个字符是书号，后面紧接着是书名，而没有空
	格，每一行一本书，以回车符结束。文件以一个空行结束。 
	
	注意是回车符结束，这个要用编辑器显示了回车符的才能够看到，我就
	是不小心删了，然后一直出错的。 
*/

#include <stdio.h>
#include <string.h>
#include <malloc.h>
#include <stdlib.h>

typedef int ElemType;

// 串的堆分配存储 
typedef struct
{
	char *ch;	// 若是非空串,则按串长分配存储区,否则ch为NULL 
	int length; // 串长度 
}HString;

// 带头结点的线性链表类型 
typedef struct LNode // 结点类型 
{
	ElemType data;
	struct LNode *next;
}LNode,*Link,*Position;

typedef struct LinkList // 链表类型 
{
	Link head,tail; // 分别指向线性链表中的头结点和最后一个结点 
	int len; // 指示线性链表中数据元素的个数 
}LinkList;

//这里将有三个表，词表（一本书中的关键词），索引表，常用词表

#define MaxKeyNum	25	// 索引表的最大容量(关键词的最大数) 
#define MaxLineLen	100	// 书目串(书名+书号)buf的最大长度 
#define MaxWordNum 	10	// 词表(一本书的关键词)的最大容量 
#define MaxNoIdx	10	// 常用词(仅指大写)的最大数 

typedef struct _WordListType
{
	char *item[MaxWordNum];	// 词表(字符串)指针数组 
	int last;	// 词的数量 
}WordListType;	// 词表类型(顺序表) 

typedef struct
{
	HString key;		// 关键词(堆分配类型,HString.h) 
	LinkList bnolist;	// 存放书号索引的链表(LinkList.h) 
}IdxTermType; // 索引项类型 

typedef struct
{
	IdxTermType item[MaxKeyNum+1];
	int last; // 关键词的个数 
}IdxListType; // 索引表类型(有序表) 

typedef struct
{
	char *item[MaxNoIdx];	// 常用词表指针数组 
	int last;				// 常用词的数量 
}NoIdxType; // 常用词表类型(有序表)

// 全局变量 
char buf[MaxLineLen+1] = {'\0'};	// 当前书目串(包括'\0') 
WordListType wdlist;	// 暂存一本书的词表 
NoIdxType noidx;		// 常用词表 



#define MaxBookNum	10	// 假设只对10本书建索引表 
#define MaxKeyNum	25	// 索引表的最大容量(关键词的最大数) 
#define MaxLineLen	100	// 书目串(书名+书号)buf的最大长度 

typedef struct
{
	char bookname[MaxLineLen]; // 书目串 
	int bookno; // 书号 
}BookTermType; // 书目项类型 

typedef struct BookListType // 书目表类型(有序表) 
{
	BookTermType item[MaxBookNum];
	int last; // 书目的数量 
}BookListType; // 书目表类型(有序表)





// 生成一个其值等于串常量chars的串T 
int StrAssign(HString *T, char *chars)
{
	int i,j;
	if((*T).ch)
		free((*T).ch); // 释放T原有空间 
	i = strlen(chars); // 求chars的长度i 
	if(!i)
	{ 
		// chars的长度为0 
		(*T).ch = NULL;
		(*T).length = 0;
	}
	else
	{
		// chars的长度不为0 
		(*T).ch = (char*)malloc(i*sizeof(char)); // 分配串空间 
		if(!(*T).ch) // 分配串空间失败 
			exit(0);
		for(j = 0; j < i; j++) // 拷贝串 
			(*T).ch[j] = chars[j];
		(*T).length = i;
	}
	return 1;
}

// 初始化(产生空串)字符串T
void InitString(HString *T)
{
	(*T).length=0;
	(*T).ch=NULL;
}

// 若S>T,则返回值>0;若S=T,则返回值=0;若S<T,则返回值<0
int StrCompare(HString S,HString T)
{
	int i;
	for(i=0;i<S.length && i<T.length;++i)
		if(S.ch[i] != T.ch[i])
			return S.ch[i]-T.ch[i];
	return S.length-T.length;
}

// 由串S复制得串T
int StrCopy(HString *T,HString S)
{
	int i;   
	if((*T).ch)
		free((*T).ch); // 释放T原有空间 
	(*T).ch=(char*)malloc(S.length*sizeof(char)); // 分配串空间 
	if(!(*T).ch) // 分配串空间失败 
		exit(0);
	for(i=0;i<S.length;i++) // 拷贝串 
		(*T).ch[i]=S.ch[i];
	(*T).length=S.length;
	return 1;
}


// 构造一个空的线性链表
int InitList(LinkList *L)
{ 
	Link p;
	p=(Link)malloc(sizeof(LNode)); // 生成头结点 
	if(p)
	{
		p->next=NULL;
		//将头尾结点都分配好，并将其下一结点置空
		(*L).head=(*L).tail=p;
		(*L).len=0;	//初始为0
		return 1;
	}
	else	// 分配失败返回
		return 0;
}

// 分配由p指向的值为e的结点，并返回1；若分配失败。则返回0
int MakeNode(Link *p,ElemType e)
{
	*p = (Link)malloc(sizeof(LNode));	//动态分配一个Link空间
	if(!*p)
		return 0;
	(*p)->data = e;	// 赋值
	return 1;
}

// 将指针s(s->data为第一个数据元素)所指(彼此以指针相链,以NULL结尾)的 
// 一串结点链接在线性链表L的最后一个结点之后,并改变链表L的尾指针指向新 
// 的尾结点 
int Append(LinkList *L,Link s)
{	
	int i=1;	//记录s为头的串结点个数
	(*L).tail->next=s;	//尾结点指向s
	while(s->next)
	{
		s=s->next;
		i++;
	}
	(*L).tail=s;
	(*L).len+=i;
	return 1;
}

// 置索引表idxlist为空表，且在idxliat.item[0]设一空串 
void InitIdxList(IdxListType *idxlist)
{
	(*idxlist).last=0;	//将索引表的关键词个数置为0
	// 将索引表的关键词块存储初始化为0
	InitString(&(*idxlist).item[0].key);
	// 将索引表的索引项的书号索引初始化为0 
	InitList(&(*idxlist).item[0].bnolist);
}

// 从buf中提取书名关键词到词表wdlist，书号存入BookNo 
void ExtractKeyWord(int *BookNo)
{
	int i,l,
		f = 1; // f是字符串结束标志 0: 结束 1: 未结束 
	char *s1,*s2;
		
	if(buf[0]<'0'||buf[0]>'9') // buf的首字母不是数字 
		exit(0);
	// 释放上一个书目在词表wdlist的存储空间，相当于初始化词表 
	for(i = 1;i <= wdlist.last; i++)
	{
		free(wdlist.item[i]);
		wdlist.item[i] = NULL;
	}
	wdlist.last = 0;
	// 前三位为书号
	*BookNo = (buf[0]-'0')*100+(buf[1]-'0')*10+(buf[2]-'0'); 
	s2 = &buf[2]; // s2指向书号的尾字符 
	do
	{
		// 提取书名关键词到词表wdlist 
		s1 = s2 + 1;	// s1向后移动一个单词 
		// char *strchr(char *s,char c)
		// 查找字符串s中首次出现字符c的位置
		// 说明：返回首次出现c的位置的指针，如果s中不存在c则返回NULL。
		// s2指向s1的第一个空格,如没有,返回NULL
		s2 = strchr(s1,' ');
		if(!s2)		// 到串尾 
		{
			s2 = strchr(s1,'\n'); // s2指向buf的最后一个字符(回车符) 
			f = 0;
		}
		l = s2 - s1; // 单词长度 
		if(s1[0]>='A'&&s1[0]<='Z') // 单词首字母为大写 
		{
			// 写入词表 
			// 生成串空间(包括'\0') 
			wdlist.item[wdlist.last] = (char *)malloc((l+1)*sizeof(char));
			for(i = 0; i < l; i++)
				wdlist.item[wdlist.last][i] = s1[i]; // 写入词表 
			wdlist.item[wdlist.last][l] = '\0';	//记得加上字符串结束符
			for(i=0;i<noidx.last;i++) // 查找是否为常用词 
				if(!strcmp(wdlist.item[wdlist.last],noidx.item[i]))
					break;
			if(i != noidx.last) // 是常用词 
			{
				free(wdlist.item[wdlist.last]); // 从词表中删除该词 
				wdlist.item[wdlist.last]=NULL;
			}
			else
				wdlist.last++; // 词表长度+1 
		}
	}while(f);	//未到字符串结尾，继续循环
}

// 用wd返回词表wdlist中第i个关键词
void GetWord(int i,HString *wd)
{
	StrAssign(wd,wdlist.item[i]); // 生成关键字字符串 
}

// 在索引表idxlist中查询是否存在与wd相等的关键词。若存在,则返回其
// 在索引表中的位置,且b取值1;否则返回插入位置,且b取值0
int Locate(IdxListType *idxlist,HString wd,int *b)
{ 
	int i,m;
	for(i=(*idxlist).last; (m=StrCompare((*idxlist).item[i].key,wd))>0;
		--i)
		;
	if(m==0) // 找到 
	{
		*b=1;
		return i;
	}
	else
	{
		*b=0;
		return i+1;
	}
}

// 在索引表idxlist的第i项上插入新关键词wd,并初始化书号索引的链表为空表 
void InsertNewKey(IdxListType *idxlist,int i,HString wd)
{
	int j;
	InitList(&(*idxlist).item[(*idxlist).last+1].bnolist);
	for(j=(*idxlist).last;j>=i;--j) // 后移索引项 
		(*idxlist).item[j+1]=(*idxlist).item[j];
	InitString(&(*idxlist).item[i].key); 
	StrCopy(&(*idxlist).item[i].key,wd);	// 串拷贝插入新的索引项 
	InitList(&(*idxlist).item[i].bnolist);	// 初始化书号索引表为空表
	(*idxlist).last++;
}

// 在索引表idxlist的第i项中插入书号为bno的索引
void InsertBook(IdxListType *idxlist,int i,int bno)
{ 
	Link p;
	if(!MakeNode(&p,bno)) // 分配失败 LinkList.c 
		exit(0);
	p->next=NULL;
	Append(&(*idxlist).item[i].bnolist,p); // 插入新的书号索引
}

// 将书号为bno的关键词插入索引表 
void InsIdxList(IdxListType *idxlist,int bno)
{
	int i,j;
	int b;
	HString wd;
	
	InitString(&wd); // bo4-2.c 
	for(i=0;i<wdlist.last;i++)
	{
		GetWord(i,&wd);
		j=Locate(idxlist,wd,&b);
		if(!b)
			InsertNewKey(idxlist,j,wd); // 插入新的索引项 
		InsertBook(idxlist,j,bno); // 插入书号索引 
	}
}

// 将生成的索引表idxlist输出到文件f
void PutText(FILE *f,IdxListType idxlist)
{
	int i,j;
	Link p;
	fprintf(f,"%d\n",idxlist.last);
	for(i=1;i<=idxlist.last;i++)
	{
		for(j=0;j<idxlist.item[i].key.length;j++)
			fprintf(f,"%c",idxlist.item[i].key.ch[j]);
		fprintf(f,"\n%d\n",idxlist.item[i].bnolist.len);
		p=idxlist.item[i].bnolist.head;
		for(j=1;j<=idxlist.item[i].bnolist.len;j++)
		{
			p=p->next;
			fprintf(f,"%d ",p->data);
		}
		fprintf(f,"\n");
	}
}

int main()
{
	FILE *f; 
	IdxListType idxlist;	// 索引表 
	int BookNo;	// 书号
	int i,k,l;
	BookListType booklist; // 书目表 
	HString ch;	// 索引字符串 
	Link p;
	
	f = fopen("常用词表.txt","r"); // 打开常用词文件 
	if(!f)
		exit(0);
	printf("常用词表中的内容：\n");
	fscanf(f, "%d", &noidx.last);	// 常用词个数
	for(k = 0; k < noidx.last; k++) // 把常用词文件的内容拷到noidx中 
	{
		fscanf(f, "%s", buf);
		printf("%s\n", buf);
		l = strlen(buf);
		noidx.item[k] = (char*)malloc(l * sizeof(char));
		strcpy(noidx.item[k], buf);
	}
	fclose(f);

	f = fopen("书目文件.txt","r"); // 打开书目文件 
	if(!f)
		exit(0);
	InitIdxList(&idxlist);	//	初始化索引表idxlist为空 
	wdlist.last = 0;		// 词表长度初值为0 
	printf("书目文件中的内容：\n");
	while(!feof(f))
	{
		fgets(buf, MaxLineLen, f);
		l = strlen(buf);
		printf("%s\n", buf); 
		if(l <= 1)
			break;
		// 从buf中提取关键词到词表，书号存入BookNo 
		ExtractKeyWord(&BookNo);
		InsIdxList(&idxlist, BookNo);
	}
	fclose(f);

    // 将生成的索引表idxlist输出到文件f 
	f=fopen("关键词索引.txt","w");
	if(!f)
		exit(0);
	PutText(f, idxlist); // 将生成的索引表idxlist输出到文件f 
	fclose(f);
	
	
// 	根据索引查询图书 

	InitString(&ch); // 初始化HString类型的变量 
	f=fopen("关键词索引.txt","r"); // 打开书名关键词索引表文件 
	if(!f)
		exit(0);
	fscanf(f,"%d",&idxlist.last); // 书名关键词个数 
	for(k=0;k<idxlist.last;k++) // 把关键词文件的内容拷到idxlist中 
	{
		fscanf(f,"%s",buf);
		i=0;
		while(buf[i])
			buf[i++]=tolower(buf[i]); // 字母转为小写 
		InitString(&idxlist.item[k].key);
		StrAssign(&idxlist.item[k].key,buf);
		InitList(&idxlist.item[k].bnolist); // 初始化书号链表 
		fscanf(f,"%d",&i);
		for(l=0;l<i;l++)
		{
			fscanf(f,"%d",&BookNo);
			if(!MakeNode(&p,BookNo)) // 分配失败 
				exit(0);
			p->next=NULL;
			Append(&idxlist.item[k].bnolist,p); // 插入新的书号索引
		}
	}
	fclose(f);
	f=fopen("书目文件.txt","r"); // 打开书目文件 
	if(!f)
		exit(0);
	i=0;
	while(!feof(f)) // 把书目文件的内容拷到booklist中 
	{
		fgets(buf,MaxLineLen,f);
		 // 前三位为书号 
		booklist.item[i].bookno =
			(buf[0]-'0')*100+(buf[1]-'0')*10+(buf[2]-'0');
		strcpy(booklist.item[i].bookname,buf);
		i++;
	}
	booklist.last=i;
	printf("请输入书目的关键词(一个)");
	scanf("%s",buf);
	i=0;
	while(buf[i])
		buf[i++]=tolower(buf[i]); // 字母转为小写 
	StrAssign(&ch,buf);
	i=0;
	do
	{
		k=StrCompare(ch,idxlist.item[i].key); // HString.c 
		i++;
	}while(k&&i<=idxlist.last);
	if(!k) // 索引表中有此关键词 
	{
		p=idxlist.item[i-1].bnolist.head->next;
		while(p)
		{
			l=0;
			while(l<booklist.last&&p->data!=booklist.item[l].bookno)
				l++;
			if(l<booklist.last)
				printf("%s",booklist.item[l].bookname);
			p=p->next;
		}
	}
	else
		printf("没找到\n");

	system("pause");
	return 0;
}
/*

常用词表.txt的内容： 

5
A
An
In
Of
The


书目文件.txt 的内容：

005Computer Data Structures
010Introduction to Data Structures
023Fundamentals of Data Structures
034The Design and Analysis of Computer Algorithms
050Introduction to Numerical Analysis
067Numerical Analysis




输出效果：

常用词表中的内容：
A
An
In
Of
The
书目文件中的内容：
005Computer Data Structures

010Introduction to Data Structures

023Fundamentals of Data Structures

034The Design and Analysis of Computer Algorithms

050Introduction to Numerical Analysis

067Numerical Analysis



请输入书目的关键词(一个)data
005Computer Data Structures
010Introduction to Data Structures
023Fundamentals of Data Structures
请按任意键继续. . .
 

*/ 
