/*
	数据结构C语言版 单链栈 
	编译环境：Dev-C++ 4.9.9.2
	日期： 2011年2月12日 
*/
#include <stdio.h>
#include <malloc.h>

typedef int SElemType; // 定义栈元素的类型 
typedef SElemType ElemType; // 栈结点类型和链表结点类型一致 

// 线性表的单链表存储结构 

typedef struct LNode
{
	ElemType data;		//数据域
	struct LNode *next;	//指针域
}LNode,*LinkList;

typedef LinkList LinkStack; // LinkStack是指向栈结点的指针类型 

// 构造一个空的线性表L 
int InitList(LinkList *L)
{
	/*
		产生头结点L,并使L指向此头结点，头节点的数据域为空，不放数据的。
		void * malloc(size_t)
		这里对返回值进行强制类型转换了，返回值是指向空类型的指针类型。
	*/
	(*L) = (LinkList)malloc( sizeof(struct LNode) );
	if( !(*L) )
		exit(0);		// 存储分配失败
	(*L)->next = NULL;	// 指针域为空
	
	return 1;
}

// 销毁线性表L，将包括头结点在内的所有元素释放其存储空间。
int DestroyList(LinkList *L)
{ 	
	LinkList q;

	// 由于单链表的每一个元素是单独分配的，所以要一个一个的进行释放
	while( *L )
	{
		q = (*L)->next;
		free( *L );		//释放
		*L = q;
	}
	
	return 1;
}

/*
	将L重置为空表，即将链表中除头结点外的所有元素释放其存
	储空间，但是将头结点指针域置空，这和销毁有区别哦。不改变L，所以
	不需要用指针。
*/
int ClearList( LinkList L )
{ 	
	LinkList p, q;

	p = L->next;	// p指向第一个结点 
	while( p )		// 没到表尾则继续循环 
	{
		q = p->next;
		free( p );	//释放空间
		p = q;
	}
	L->next = NULL; // 头结点指针域为空，链表成了一个空表 
	
	return 1;
}

// 若L为空表（根据头结点L->next来判断，为空则是空表），则返回1，否则返回0。
int ListEmpty(LinkList L)
{ 	
	if( L->next )	// 非空 
		return 0;
	else
		return 1;
}

// 返回L中数据元素个数。
int ListLength(LinkList L)
{ 	
	int i = 0;
	LinkList p = L->next; // p指向第一个结点 
	
	while(p) // 没到表尾，则继续循环 
	{
		i++;
		p=p->next;
	}
	return i;
}

// 返回表头元素的值
int GetFirstElem(LinkList L,ElemType *e)
{ 
	LinkList p=L->next;	//第一个结点给p
	if(!p)	// 空表 
		return 0;
	else	// 非空表
		*e=p->data;
	return 1;
}

// L的头部插入新的数据元素e,作为链表的第一个元素 
int HeadInsert(LinkList L,ElemType e)
{
	LinkList s;
	s=(LinkList)malloc(sizeof(struct LNode)); // 生成新结点 
	s->data=e; // 给结点赋值 
	s->next=L->next; // 插在表头 
	L->next=s;
	return 1;
}

// 删除L的第一个数据元素，并由e返回其值 
int DeleteFirst(LinkList L,ElemType *e)
{
	LinkList p=L->next;
	if(p)
	{
		*e=p->data;
		L->next=p->next;
		free(p);
		return 1;
	}
	else
		return 0;
}

#define InitStack InitList // InitStack()与InitList()作用相同，下同 
#define DestroyStack DestroyList
#define ClearStack ClearList
#define StackEmpty ListEmpty
#define StackLength ListLength
#define GetTop GetFirstElem
#define Push HeadInsert
#define Pop DeleteFirst


// 依次对L的每个数据元素调用函数vi()。一旦vi()失败,则操作失败
int ListTraverse(LinkList L,void(*vi)(ElemType))
{
	LinkList p=L->next;
	
	//对所有元素调用函数vi
	while(p)
	{
		vi(p->data);
		p=p->next;
	}
	printf("\n");

	return 1;
}

// 从栈底到栈顶依次对栈中每个元素调用函数visit()
int StackTraverse(LinkStack S,void(*visit)(SElemType))
{
	SElemType e;
	LinkStack temp,p=S;
	InitStack(&temp); // 初始化temp栈 
	while(p->next)
	{
		GetTop(p,&e);
		Push(temp,e);
		p=p->next;
	}
	ListTraverse(temp,visit);
	
	return 1;
}


void print(SElemType c)
{
	printf("%d ",c);
}

int main()
{
	int j;
	LinkStack s;
	SElemType e;
	if(InitStack(&s))
	for(j=1;j<=5;j++)
		Push(s,2*j);
	printf("栈中的元素从栈底到栈顶依次为: ");
	StackTraverse(s,print);
	Pop(s,&e);
	printf("弹出的栈顶元素为%d\n",e);
	printf("栈空否: %d(1:空 0:否)\n",StackEmpty(s));
	GetTop(s,&e);
	printf("当前栈顶元素为%d，栈的长度为%d\n",e,StackLength(s));
	ClearStack(s);
	printf("清空栈后，栈空否: %d(1:空 0:否)，栈的长度为%d\n",
		StackEmpty(s),StackLength(s));
	printf("是否销毁栈了: %d(1:是 0:否)\n",DestroyStack(&s));
	
	system("pause");
	return 0;
}

/*
输出效果：

栈中的元素从栈底到栈顶依次为: 2 4 6 8 10
弹出的栈顶元素为10
栈空否: 0(1:空 0:否)
当前栈顶元素为8，栈的长度为4
清空栈后，栈空否: 1(1:空 0:否)，栈的长度为0
是否销毁栈了: 1(1:是 0:否)
请按任意键继续. . . 

*/ 
