/*
	数据结构C语言版 单链队列
	P61-62
	编译环境：Dev-C++ 4.9.9.2
	日期：2011年2月10日 
*/ 

#include <stdio.h>
#include <malloc.h>

typedef int QElemType;

// 单链队列－－队列的链式存储结构 
typedef struct QNode
{
	QElemType data;		//数据域
	struct QNode *next;	//指针域
 }QNode,*QueuePtr;

typedef struct
{
	QueuePtr front,//队头指针，指针域指向队头元素
			 rear; //队尾指针，指向队尾元素
}LinkQueue;


// 构造一个空队列Q
int InitQueue(LinkQueue *Q)
{ 
	//动态分配一个空间
	(*Q).front=(*Q).rear=(QueuePtr)malloc(sizeof(QNode));
	if(!(*Q).front)
		exit(0);
	//队头指针指向空，无数据域，这样构成了一个空队列
	(*Q).front->next=NULL;
	return 1;
}

// 销毁队列Q(无论空否均可) 
int DestroyQueue(LinkQueue *Q)
{
	while((*Q).front)	//释放元素空间
	{
		(*Q).rear=(*Q).front->next;
		free((*Q).front);
		(*Q).front=(*Q).rear;
	}
	return 1;
}

// 将Q清为空队列 
int ClearQueue(LinkQueue *Q)
{
	QueuePtr p,q;
	(*Q).rear=(*Q).front;
	p=(*Q).front->next;
	(*Q).front->next=NULL;
	while(p)
	{
		q=p;
		p=p->next;
		free(q);
	}
	return 1;
}

// 若Q为空队列,则返回1,否则返回0 
int QueueEmpty(LinkQueue Q)
{
	if(Q.front==Q.rear)
		return 1;
	else
		return 0;
}

// 求队列的长度 
int QueueLength(LinkQueue Q)
{
	int i=0;
	QueuePtr p;
	
	p=Q.front;
	while(Q.rear!=p)	//没到队头继续循环
	{
		i++;
		p=p->next;
	}
	return i;
}

// 若队列不空,则用e返回Q的队头元素,并返回1,否则返回0 
int GetHead_Q(LinkQueue Q,QElemType *e) 
 {
	QueuePtr p;
	if(Q.front==Q.rear)
		return 0;
	p=Q.front->next;	//队头元素
	*e=p->data;
	return 1;
}

// 插入元素e为Q的新的队尾元素
int EnQueue(LinkQueue *Q,QElemType e)
{ 
	QueuePtr p=(QueuePtr)malloc(sizeof(QNode));
	if(!p) // 存储分配失败 
		exit(0);
	//生成一个以为e为数据域的队列元素
	p->data=e;
	p->next=NULL;
	//将该新队列元素接在队尾的后面
	(*Q).rear->next=p;
	(*Q).rear=p;
	return 1;
}

// 若队列不空,删除Q的队头元素,用e返回其值,并返回1,否则返回0 
int DeQueue(LinkQueue *Q,QElemType *e)
{
	QueuePtr p;
	if((*Q).front==(*Q).rear)
		return 0;
	p=(*Q).front->next;	//队头元素
	*e=p->data;
	(*Q).front->next=p->next;
	if((*Q).rear==p)
		(*Q).rear=(*Q).front;
	free(p);
	return 1;
}

// 从队头到队尾依次对队列Q中每个元素调用函数vi()
int QueueTraverse(LinkQueue Q,void(*vi)(QElemType))
{
	QueuePtr p;
	
	p=Q.front->next;
	while(p)
	{
		vi(p->data);
		p=p->next;
	}
	printf("\n");
	return 1;
}


void visit(QElemType i)
{
	printf("%d ",i);
}

int main()
{
	int i;
	QElemType d;
	LinkQueue q;
	
	i=InitQueue(&q);
	if(i)
		printf("成功地构造了一个空队列!\n");
	printf("是否空队列？%d(1:空 0:否)  ",QueueEmpty(q));
	printf("队列的长度为%d\n",QueueLength(q));
	EnQueue(&q,-5);
	EnQueue(&q,5);
	EnQueue(&q,10);
	printf("插入3个元素(-5,5,10)后,队列的长度为%d\n",QueueLength(q));
	printf("是否空队列？%d(1:空 0:否)  ",QueueEmpty(q));
	printf("队列的元素依次为：");
	QueueTraverse(q,visit);
	i=GetHead_Q(q,&d);
	if(i==1)
		printf("队头元素是：%d\n",d);
	DeQueue(&q,&d);
	printf("删除了队头元素%d\n",d);
	i=GetHead_Q(q,&d);
	if(i==1)
		printf("新的队头元素是：%d\n",d);
	ClearQueue(&q);
	printf("清空队列后,q.front=%u q.rear=%u q.front->next=%u\n",
		q.front,q.rear,q.front->next);
	DestroyQueue(&q);
	printf("销毁队列后,q.front=%u q.rear=%u\n",q.front, q.rear);
	
	system("pause");
	return 0;
}
/*
输出效果：

成功地构造了一个空队列!
是否空队列？1(1:空 0:否)  队列的长度为0
插入3个元素(-5,5,10)后,队列的长度为3
是否空队列？0(1:空 0:否)  队列的元素依次为：-5 5 10
队头元素是：-5
删除了队头元素-5
新的队头元素是：5
清空队列后,q.front=8523792 q.rear=8523792 q.front->next=0
销毁队列后,q.front=0 q.rear=0
请按任意键继续. . . 

*/
