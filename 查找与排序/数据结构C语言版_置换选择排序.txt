/*
	数据结构C语言版 置换选择排序 
	P301
	通过置换－选择排序产生不等长的初始归并段文件.
	编译环境：Dev-C++ 4.9.9.2
	日期： 2011年2月9日 
*/

#include <stdio.h>
#include <malloc.h>
#include <limits.h>
#include <stdlib.h>
#include <string.h>

#define MAXKEY INT_MAX
#define RUNEND_SYMBOL INT_MAX	// 归并段结束标志
#define w 6		// 内存工作区可容纳的记录个数
#define M 10	/* 设输出M个数据换行 */
#define N 24	/* 设大文件有N个数据 */

typedef int KeyType;	// 定义关键字类型为整型
typedef int InfoType;	// 定义其它数据项的类型

// 记录类型
typedef struct
{
	KeyType key;		// 关键字项
	InfoType otherinfo; // 其它数据项，具体类型在主程中定义
}RedType;

// 败者树是完全二叉树且不含叶子，可采用顺序存储结构
typedef int LoserTree[w]; 

typedef struct
{
	RedType rec;	/* 记录 */
	KeyType key;	/* 从记录中抽取的关键字 */
	int rnum;		/* 所属归并段的段号 */
}RedNode, WorkArea[w]; /* 内存工作区，容量为w */

// 算法11.6
// 从wa[q]起到败者树的根比较选择MINIMAX记录，并由q指示它所在的归并段
void Select_MiniMax(LoserTree ls,WorkArea wa,int q)
{
	int p, s, t;
	t = (w+q)/2;
	p = ls[t];	// ls[t]为q的双亲节点，p作为中介
	for(; t > 0;)
	{
		// 段小者 或者 段相等且关键字更小的 胜出
		if(wa[p].rnum < wa[q].rnum || wa[p].rnum == wa[q].rnum
			&& wa[p].key < wa[q].key)
		{
			s=q;
			q=ls[t]; /* q指示新的胜利者 */
			ls[t]=s;
		}
		t = t/2;	// 胜者继续向上跟双亲节点比较，
		p = ls[t];
	}
	ls[0] = q;	// 最后的冠军
}

/*	算法11.7
	输入w个记录到内存工作区wa,建得败者树ls,选出关键字最小的记录
	并由s指示其在wa中的位置。
*/
void Construct_Loser(LoserTree ls, WorkArea wa, FILE *fi)
{
	int i;
	// 工作区初始化 p303 图11.6
	for(i = 0; i < w; ++i)
		wa[i].rnum = wa[i].key = ls[i] = 0;
	for(i = w - 1; i >= 0; --i)
	{
		// 输入一个记录
		fread(&wa[i].rec, sizeof(RedType), 1, fi);
		wa[i].key = wa[i].rec.key;	// 提取关键字
		wa[i].rnum = 1;				// 其段号为＂1＂
		Select_MiniMax(ls,wa,i);	// 调整败者树
	}
}

// 算法11.5，求得一个初始归并段，fi为输入文件指针，fo为输出文件指针。
void get_run(LoserTree ls,WorkArea wa,int rc,int *rmax,FILE *fi,FILE *fo)
{
	int q;
	KeyType minimax;

	// 选得的MINIMAX记录属当前段时
	while(wa[ls[0]].rnum == rc)
	{
		// q指示MINIMAX记录在wa中的位置
		q = ls[0];
		minimax = wa[q].key;
		// 将刚选得的MINIMAX记录写入输出文件
		fwrite(&wa[q].rec, sizeof(RedType), 1, fo);
		// 从输入文件读入下一记录(改)
		fread(&wa[q].rec,sizeof(RedType),1,fi);
		// 如果输入文件结束，则虚设一条记录（属＂rmax+1＂段）
		if(feof(fi))
		{
			wa[q].rnum = *rmax+1;
			wa[q].key = MAXKEY;
		}
		else	// 输入文件非空时
		{
			// 提取关键字
			wa[q].key = wa[q].rec.key;
			if(wa[q].key < minimax)
			{
				// 新读入的记录比上一轮的最小关键字还小，则它
				// 属下一段
				*rmax = rc+1;
				wa[q].rnum = *rmax;
			}
			else
				// 新读入的记录大则属当前段
				wa[q].rnum = rc;
		}
		// 选择新的MINIMAX记录
		Select_MiniMax(ls, wa, q);
	}
}

/*	算法11.4 P301
	在败者树ls和内存工作区wa上用置换－选择排序求初始归并段，fi为
	输入文件(只读文件)指针,fo为输出文件(只写文件)指针,两个文件均
	已打开。
*/
void Replace_Selection(LoserTree ls, WorkArea wa, FILE *fi, FILE *fo)
{
	int rc, rmax;
	RedType j;
	j.key = RUNEND_SYMBOL;
	// 初建败者树
	Construct_Loser(ls, wa, fi);
	/*
	rc指示当前生成的初始归并段的段号，rmax指示wa中关键字所属初始
	归并段的最大段号
	*/
	rc = rmax =1;
	// ＂rc=rmax+1＂标志输入文件的置换－选择排序已完成
	while(rc <= rmax)
	{
		// 求得一个初始归并段
		get_run(ls, wa, rc, &rmax, fi, fo);
		j.otherinfo=rc;
		fwrite(&j,sizeof(RedType),1,fo); /* 将段结束标志写入输出文件 */
		rc = wa[ls[0]].rnum; /* 设置下一段的段号 */
	}
}

void print(RedType t)
{
	printf("(%d,%d) ",t.key,t.otherinfo);
}

int main()
{
	RedType a[N]={
		{51, 1},{49, 2},{39, 3},{46, 4},{38, 5},{29, 6},
		{14, 7},{61, 8},{15, 9},{30,10},{ 1,11},{48,12},
		{52,13},{ 3,14},{63,15},{27,16},{ 4,17},{13,18},
		{89,19},{24,20},{46,21},{58,22},{33,23},{76,24}
	};
	RedType b;		// 中介
	FILE *fi,		//输入文件
		*fo;		//输出文件
	LoserTree ls;	// 败者树
	WorkArea wa;	// 内存工作区
	int i, k, j = RUNEND_SYMBOL;
	char s[3], 
		fname[4];	// 文件名

	fo = fopen("ori","wb");
	/* 将数组a写入大文件ori */
	fwrite(a, sizeof(RedType), N, fo);
	fclose(fo);

	fi = fopen("ori","rb");
	printf("大文件的记录为:\n");
	for(i = 1; i <= N; i++)
	{
		// 依次将大文件ori的数据读入b
		fread(&b,sizeof(RedType),1,fi);
		print(b);
		if(i % M == 0)
			printf("\n");
	}
	printf("\n\n");
	// 使fi的指针重新返回大文件ori的起始位置，以便重新读入内
	// 存，产生有序的子文件。
	rewind(fi);
	fo = fopen("out","wb");
	// 用置换－选择排序求初始归并段
	Replace_Selection(ls, wa, fi, fo);
	fclose(fo);
	fclose(fi);

	fi = fopen("out","rb");
	printf("初始归并段文件的记录为:\n");
	i = 1;
	do
	{
		k = fread(&b, sizeof(RedType), 1, fi);
		if(k == 1)
		{
			print(b);
			if(b.key == j)
				printf("\n\n");
		}
	}while(k == 1);
	printf("\n");
	rewind(fi);
	k = 0;
	// 按段输出初始归并段文件out
	while(!feof(fi))
	{
		/* 依次生成文件名f0,f1,… */
		itoa(k,s,10);
		strcpy(fname,"f");
		strcat(fname,s);
		/* 依次以写的方式打开文件f0,f1,… */
		fo = fopen(fname,"wb");
		do
		{
			i = fread(&b,sizeof(RedType),1,fi);
			if(i == 1)
			{
				/* 将b写入文件f0,f1,… */
				fwrite(&b,sizeof(RedType),1,fo);
				if(b.key == j) // 1个归并段结束
				{
					k++;
					fclose(fo);
					break;
				}
			}
		}while(i==1);
	};
	fclose(fi);
	printf("共产生%d个初始归并段文件\n", k);
	
	system("pause");
	return 0;
}
/*
输出效果：

大文件的记录为:
(51,1) (49,2) (39,3) (46,4) (38,5) (29,6) (14,7) (61,8) (15,9) (30,10)
(1,11) (48,12) (52,13) (3,14) (63,15) (27,16) (4,17) (13,18) (89,19) (24,20)
(46,21) (58,22) (33,23) (76,24)

初始归并段文件的记录为:
(29,6) (38,5) (39,3) (46,4) (49,2) (51,1) (61,8) (2147483647,1)

(1,11) (3,14) (14,7) (15,9) (27,16) (30,10) (48,12) (52,13) (63,15) (89,19) (214
7483647,2)

(4,17) (13,18) (24,20) (33,23) (46,21) (58,22) (76,24) (2147483647,3)


共产生3个初始归并段文件
请按任意键继续. . .
*/
